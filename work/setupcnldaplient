#!/bin/sh

#This script will setup LDAP client on compute nodes.
logdir=/opt/pcm/log/
logfile=$logdir/postscript_config_ldap_client.log

#default confs for ldap, /etc/ldap.conf
confs="/etc/ldap.conf"

ostype=''
UNKNOWOS="UNKNOW operating system"

#------------------------------------------------------------------
# Name: LOG
# Synopsis: LOG "$message"
# Description:
#       Record message into log file.
#------------------------------------------------------------------
LOG ()
{
    echo `date` "$1" >> "$logfile"
}

#install packages and some variables for different linux distro
prepare()
{
    installcmd=''
    pkgmgrname=''
    pkgs=''
    errmsg="Verify that %s is configured correctly. Exiting the installation ...\n"
    case $ostype in
        rhel)
            installcmd="yum -y install "
            pkgmgrname=yum
            _rhel_major_ver=`cat /etc/redhat-release  | sed 's/.*release \(.*\) .*/\1/' | cut -d. -f1`
            confs="/etc/pam_ldap.conf /etc/nslcd.conf"
            if [ "$_rhel_major_ver" == "5" ]; then
                pkgs="openldap-clients nss_ldap authconfig"
            else
                pkgs="openldap-clients pam_ldap nss-pam-ldapd authconfig"
            fi
            ;;
        sles)
            installcmd="zypper install -y --auto-agree-with-licenses "
            pkgs="pam_ldap nss_ldap  pam_ldap-32bit nss_ldap-32bit openldap2-client yast2 yast2-ldap-client"
            pkgmgrname=zypper
            ;;
        ubuntu)
            installcmd="DEBIAN_FRONTEND=noninteractive apt-get -y install "
            pkgs="ldap-auth-config nscd"
            pkgmgrname=apt
            ;;
        *)
            echo $UNKNOWOS 2>&1
            exit 1
    esac
    installcmd="$installcmd $pkgs >> $INSTALL_LOG 2>&1"
    echo $installcmd >> $INSTALL_LOG
    eval $installcmd
    if [ "x$?" != "x0" ]; then
        printf "$errmsg" $pkgmgrname 2>&1
        exit 1
    fi
}

getostype()
{
    if cat /etc/issue |grep -i sles >> /dev/null 2>&1 ; then
        ostype=sles
    elif cat /etc/issue |grep -i "red hat" >> /dev/null 2>&1 
        ostype=rhel
    elif cat /etc/issue |grep -i ubuntu >> /dev/null 2>&1 
        ostype=ubuntu
    else
        echo "$UNKNOWOS" 1>&2 >> $logfile
        exit 1
    fi
}

# Get necessary parameters from database:
# site  table must have following  records:
# keys			values
# LDAP_ENABLEFLAG	true/false
# LDAP_SERVER_URL	LDAP server address, for example: ldap://9.115.120.49:389
# LDAP_BASE_DOMAIN	LDAP base domain, for example: dc=leiaitest,dc=com
# LDAP_BIND_USER	LDAP bind user DN for PCM, for example: uid=PCMAdmin,ou=user,dc=example,dc=com
# LDAP_BIND_USERPW	LDAP bind user password, for example: PCMAdmin
#
checkvars()
{
    if [ x$LDAP_ENABLEFLAG = "xtrue" ]; then
        LOG "LDAP_SERVER_URL=$LDAP_SERVER_URL"
        LOG "LDAP_BASE_DOMAIN=$LDAP_BASE_DOMAIN"
        LOG "LDAP_BIND_USER=$LDAP_BIND_USER"

        if [ "x$LDAP_SERVER_URL" = "x" ] || [ "x$LDAP_BASE_DOMAIN" = "x" ] \
            || [ "x$LDAP_BIND_USER" = "x" ] || [ "x$LDAP_BIND_USERPW" = "x" ]; then 
        LOG "Empty value for LDAP settings, quit"
        exit 1
        fi
    else
        LOG "Do not configure LDAP according to database, quit"
        exit 0
    fi
}

genconfs()
{
    confs=($confs) 
    for conf in $confs; do
        #back up files to .pcmbak first
        if [ -f $conf ]; then
            if [ ! -f $conf.pcmbak ]; then
                mv $conf $conf.pcmbak
            fi
        fi

        # create a new one
        cat > $conf <<_EOF
base $PCM_LDAP_BASE_DOMAIN
binddn $PCM_LDAP_BINDDN
uri $PCM_LDAP_SERVER_URL
bindpw $PCM_LDAP_BINDPW
ldap_version 3
_EOF
    done
}

function update_or_append_config() {
    local _option=$1
    local _filename=$2
    local _option_name=`echo $_option | cut -d= -f1`
    local _option_value=`echo $_option | cut -d= -f2`

    local _exists=`grep $_option_name $_filename`

    if [ ! -z "$_exists" ]; then
        sed -e 's/'$_option_name'=.*/'$_option_name'='$_option_value'/' < $_filename > $_filename.bak
        mv $_filename.bak $_filename
    else
        echo "$_option_name=$_option_value" >> $_filename
    fi

    return 0
}

configrhel()
{
    #disable sssd
    authconfig_major_ver=`rpm -qa authconfig | cut -d- -f2- | cut -d. -f1`
    if [ "$authconfig_major_ver" == "5" ]; then
        # authconfig 5 (RHEL 5.x) doesn't have enableforcelegacy.  add this
        # manually to /etc/sysconfig/authconfig
        update_or_append_config FORCELEGACY=yes /etc/sysconfig/authconfig
        /usr/sbin/authconfig --disablesssd --disablesssdauth --update >> $logfile
    else
        /usr/sbin/authconfig --disablesssd --disablesssdauth --enableforcelegacy --update >> $logfile
    fi
    if [ "$?" != "0" ]; then
        LOG "The system could not disable SSSD service using the authconfig commands."
        return 1
    fi

    /usr/sbin/authconfig --enableldap --enableldapauth --ldapserver=$LDAP_SERVER_URL --ldapbasedn=$LDAP_BASE_DOMAIN --update >> $logfile
    if [ "$?" != "0" ] ; then
        LOG "The system could not configure the LDAP client using the authconfig command."
        return 1
    fi
        return 0
}

configsles()
{
    LDAPSERVERNAME=`echo $LDAP_SERVER_URL | awk -F ':' '{print $2}' | cut -c 3-`
    /sbin/yast ldap pam enable server="$LDAPSERVERNAME" base="$LDAP_BASE_DOMAIN" ldappw="$LDAP_BIND_USERPW" sssd=no tls=no
    if [ "$?" != "0" ] ; then
        LOG "The system could not configure the LDAP client using the authconfig command."
        return 1
    fi
        return 0
}

#main entry ==================================

#create log dir, if the directory does not exist
if [ ! -d $logdir ]; then
    mkdir -p $logdir
fi

LOG "Starting to config ldap client..."

#check env vars
checkvars

# OS type:
getostype

# install ldap client required packages by yum/zypper if not exist
prepare

#generate config files
genconfs

LOG "Configuring ldap client..."

if [ x$ostype = xrhel ]; then
    configrhel 
elif [ x$ostype = xsles ]; then
    configsles 
fi

if [ $? != 0 ]; then
    exit 1;
fi

LOG "The installer successfully installed and configured the LDAP client."
exit 0
